# This is a basic workflow to help you deploy an ADF ARM template to a higher environmentss

# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Deploy to QA and Prod
on:
  push:
    branches:
      - adf_publish
  workflow_dispatch:
env:
  ARMTemplate: "./devcicdtesta/ARMTemplateForFactory.json"
  ARMParameter: "./devcicdtesta/ARMTemplateParametersForFactory.json"
jobs:
    deploy-to-qa:
      runs-on: ubuntu-latest
      environment: QA
      name: 'This deploys to QA'
      steps:
      - uses: actions/checkout@v3
      
      - name: Install Az PowerShell module
        run: if('${{ inputs.skipAzModuleInstallation }}' -ne 'true') { Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force }
        shell: pwsh
      
      - name: Azure Login
        uses: Azure/login@v1.4.3
        with:
          # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
          creds: ${{secrets.AZURE_CREDENTIALS}}
          
      - name: Run Pre-deployment script
        shell: pwsh
        run: |
          env:
            AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          $AzureCredentials = ConvertTo-SecureString -String $env:AZURE_CREDENTIALS -AsPlainText -Force | ConvertFrom-SecureString
          $AzureCredentialObject = ConvertFrom-Json -InputObject $AzureCredentials
          $ServicePrincipal = New-Object Microsoft.Azure.Commands.ActiveDirectory.PSADPasswordCredential `
                                   -Property @{ StartDate=Get-Date; EndDate=Get-Date `
                                   .AddYears(1); KeyId=[Guid]::NewGuid(); Value=$AzureCredentialObject.clientSecret }
          $Credential = New-Object System.Management.Automation.PSCredential `
                                   ($AzureCredentialObject.clientId, $ServicePrincipal)
          Connect-AzAccount -ServicePrincipal -Credential $Credential -TenantId $AzureCredentialObject.tenantId
          ./PrePostDeploymentScript.ps1 `
                -armTemplate "devcicdtesta/ARMTemplateForFactory.json" `
                -ResourceGroupName "${{vars.Azure_RG}}" `
                -DataFactoryName "${{vars.factory_name}}" `
                -predeployment $true `
                -deleteDeployment $false	
      - name: Deploy Azure Resource Manager (ARM) Template
        uses: Azure/arm-deploy@v1.0.6
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Target resource group of the deployment.
          resourceGroupName: ${{vars.Azure_RG}}
          # Specify the path to the ADF ARM template. In this scenario, the workflow is in the same branch, 
          # hence we only add the folder and arm template name to the path
          template:  ${{env.ARMTemplate}}
          parameters: ${{env.ARMParameter}}
            AzureBlobStorage1_connectionString=${{vars.AzureBlobStorage1_connectionString}}
            factoryName=${{vars.factory_name}}

          # Incremental (only add resources to resource group) or Complete (remove extra resources from resource group) or Validate (only validates the template).
          deploymentMode: Incremental
      
      - name: Run Post-deployment script
        run: |
          ./PrePostDeploymentScript.ps1 `
             	-armTemplate "devcicdtesta/ARMTemplateForFactory.json" `
                -ResourceGroupName "${{ inputs.resourceGroupName }}" `
                -DataFactoryName '${{ inputs.dataFactoryName }}' `
                -predeployment $false `
                -deleteDeployment $true
        shell: pwsh
        
    deploy-to-prod:
      runs-on: ubuntu-latest
      environment: prod
      name: 'This deploys to Prod'
      needs: deploy-to-qa
      steps:
      - uses: actions/checkout@v3

      - name: Azure Login
        uses: Azure/login@v1.4.3
        with:
          # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
          creds: ${{secrets.AZURE_CREDENTIALS}}
          
      - name: Install Az PowerShell module
        run: if('${{ inputs.skipAzModuleInstallation }}' -ne 'true') { Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force }
        shell: pwsh

      - name: Run Pre-deployment script
        run: |
          .\PrePostDeploymentScript.ps1 `
            -armTemplate " ${{env.ARMTemplate}}" `
            -ResourceGroupName "${{vars.Azure_RG}}" `
            -DataFactoryName "${{vars.factory_name}}" `
            -predeployment $true `
            -deleteDeployment $false
        shell: pwsh

      - name: Deploy Azure Resource Manager (ARM) Template
        uses: Azure/arm-deploy@v1.0.6
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Target resource group of the deployment.
          resourceGroupName: ${{vars.Azure_RG}}
          # Specify the path to the ADF ARM template. In this scenario, the workflow is in the same branch, 
          # hence we only add the folder and arm template name to the path
          template:  ${{env.ARMTemplate}}
          parameters: ${{env.ARMParameter}}
            AzureBlobStorage1_connectionString=${{vars.AzureBlobStorage1_connectionString}}
            factoryName=${{vars.factory_name}}

          # Incremental (only add resources to resource group) or Complete (remove extra resources from resource group) or Validate (only validates the template).
          deploymentMode: Incremental

      - name: Run Post-deployment script
        shell: pwsh
        run: |
          ./PrePostDeploymentScript.ps1 `
            -armTemplate " ${{env.ARMTemplate}}" `
            -ResourceGroupName "${{vars.Azure_RG}}" `
            -DataFactoryName "${{vars.factory_name}}" `
            -predeployment $false `
            -deleteDeployment $true         
